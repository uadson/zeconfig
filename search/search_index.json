{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"ZeConfig EN   -   BR","text":"<p>ZeConfig is a Python library designed to manage application configurations, making it easier to handle sensitive data and environment-specific settings. It supports configuration files in both TOM, JSON, YAML, YML and ENV formats.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Automatic detection of configuration file location within the current directory or its subdirectories.</li> <li>Support for TOML, JSON, YAML, YML and ENV configuration files.</li> <li>Easy access to environment-specific keys and values.</li> </ul>"},{"location":"#installation","title":"Installation","text":"<pre><code>pip install zeconfig\n</code></pre>"},{"location":"#usage","title":"Usage","text":""},{"location":"#0-creating-a-configuration-file","title":"0. Creating a configuration file","text":"<p>At the root of the project, create a file with one of the extensions .toml, .json, .yaml, .yml or .env.</p> <p>For example: config.json</p>"},{"location":"#1-configuration-file-format","title":"1. Configuration File Format","text":""},{"location":"#example-configjson","title":"Example <code>config.json</code>","text":"<pre><code>{\n    \"DATABASE_URL\":  \"sqlite:///dev.db\",\n    \"SECRET_KEY\": \"dev-secret\"\n}\n</code></pre>"},{"location":"#2-initialize-zeconfig","title":"2. Initialize ZeConfig","text":"<pre><code>from ze import config\n</code></pre>"},{"location":"#3-manage-environment-settings","title":"3. Manage Environment Settings","text":"<p>Retrieve a value for a specific key in the current environment:</p> <pre><code>DATABASE_URL = config(\"DATABASE_URL\")\nprint(f\"Database URL: {DATABASE_URL}\")\n\n&gt;&gt;&gt; OUTPUT: \n    sqlite:///dev.db\n</code></pre>"},{"location":"#error-handling","title":"Error Handling","text":"<p>ZeConfig raises descriptive exceptions for common issues:</p> <ul> <li><code>KeyError</code>: Missing environment or key in the configuration file.</li> </ul>"},{"location":"#license","title":"License","text":"<p>This project is licensed under the MIT License. See the LICENSE file for details.</p>"},{"location":"#contributing","title":"Contributing","text":"<p>Contributions are welcome! Please open an issue or submit a pull request on the GitHub repository.</p>"},{"location":"#contact","title":"Contact","text":"<p>For questions or support, please reach out to uadsonpy@gmail.com.</p>"},{"location":"config_parser_model/","title":"ConfigParser","text":"<p>               Bases: <code>ABC</code></p> <p>Abstract base class for configuration file parses.</p> Source code in <code>ze/src/models.py</code> <pre><code>class ConfigParser(ABC):\n    \"\"\"\n    Abstract base class for configuration\n    file parses.\n    \"\"\"\n\n    @abstractmethod\n    def parse(self, file_path: str) -&gt; dict:\n        \"\"\"\n        Parses a configuration file.\n\n        Args:\n            file_path (str): Path to the\n            configuration file.\n\n        Returns:\n            dict: Parsed configuration data.\n        \"\"\"\n</code></pre>"},{"location":"config_parser_model/#ze.src.models.ConfigParser.parse","title":"<code>parse(file_path)</code>  <code>abstractmethod</code>","text":"<p>Parses a configuration file.</p> <p>Parameters:</p> Name Type Description Default <code>file_path</code> <code>str</code> <p>Path to the</p> required <p>Returns:</p> Name Type Description <code>dict</code> <code>dict</code> <p>Parsed configuration data.</p> Source code in <code>ze/src/models.py</code> <pre><code>@abstractmethod\ndef parse(self, file_path: str) -&gt; dict:\n    \"\"\"\n    Parses a configuration file.\n\n    Args:\n        file_path (str): Path to the\n        configuration file.\n\n    Returns:\n        dict: Parsed configuration data.\n    \"\"\"\n</code></pre>"},{"location":"core/","title":"Core","text":"<p>Parse a configuration file and update the configuration data dictionary.</p> <p>Parameters:</p> Name Type Description Default <code>config_data</code> <code>Dict</code> <p>Dictionary containing existing configuration data</p> required <code>path</code> <code>AnyStr</code> <p>Directory path where the configuration file is located.</p> required <code>file</code> <code>AnyStr</code> <p>Name of the configuration file to parse.</p> required Note <p>Uses the appropriate parser from ParserFactory based on the file extension. Modifies the config_data dictionary in-place with parsed results.</p> Source code in <code>ze/src/core.py</code> <pre><code>def parse_data(\n    config_data: Dict,\n    path: AnyStr,\n    file: AnyStr,\n):\n    \"\"\"Parse a configuration file and update the configuration data dictionary.\n\n    Args:\n        config_data (Dict): Dictionary containing existing configuration data\n        to be updated with new parsed data.\n        path (AnyStr): Directory path where the configuration file is located.\n        file (AnyStr): Name of the configuration file to parse.\n\n    Note:\n        Uses the appropriate parser from ParserFactory based on the file extension.\n        Modifies the config_data dictionary in-place with parsed results.\n    \"\"\"\n    file_path = os.path.join(path, file)\n    parser = ParserFactory.get_parser(file)\n    config_data.update(parser.parse(file_path))\n</code></pre> <p>Collect and process configuration files from a directory.</p> <p>Scans the specified directory for files, adds them to the config_files list, and parses supported file formats to update configuration data.</p> <p>Parameters:</p> Name Type Description Default <code>config_files</code> <code>List</code> <p>List to be populated with filenames found in the directory.</p> required <code>config_data</code> <code>Dict</code> <p>Dictionary to store aggregated configuration data.</p> required <code>path</code> <code>AnyStr</code> <p>Path of the directory to scan for configuration files.</p> required Note <p>Processes files with the following extensions: .json, .toml, .yaml, .yml. Skips files with unsupported extensions.</p> Source code in <code>ze/src/core.py</code> <pre><code>def get_file_data(config_files: List, config_data: Dict, path: AnyStr):\n    \"\"\"Collect and process configuration files from a directory.\n\n    Scans the specified directory for files, adds them to the config_files list,\n    and parses supported file formats to update configuration data.\n\n    Args:\n        config_files (List): List to be populated with filenames found in the directory.\n        config_data (Dict): Dictionary to store aggregated configuration data.\n        path (AnyStr): Path of the directory to scan for configuration files.\n\n    Note:\n        Processes files with the following extensions: .json, .toml, .yaml, .yml.\n        Skips files with unsupported extensions.\n    \"\"\"\n\n    for entry in os.scandir(path):\n        if entry.is_file():\n            config_files.append(entry.name)\n\n    for file in config_files:\n        if file.endswith('.json'):\n            parse_data(config_data, path, file)\n        elif file.endswith('.toml'):\n            parse_data(config_data, path, file)\n        elif file.endswith(('.yaml', '.yml')):\n            parse_data(config_data, path, file)\n        elif file.endswith('.env') or file.startswith('.env'):\n            parse_data(config_data, path, file)\n</code></pre>"},{"location":"env_parser_model/","title":"ENVParser","text":"<p>Parses a .env configuration file.</p> <p>               Bases: <code>ConfigParser</code></p> Source code in <code>ze/src/models.py</code> <pre><code>class ENVParser(ConfigParser):\n    @classmethod\n    def parse(cls, file_path: str) -&gt; dict:\n        \"\"\"\n        Parses a .env configuration file.\n\n        Args:\n            file_path: The path to the .env file.\n\n        Returns:\n            A dictionary containing the parsed environment variables.\n        \"\"\"\n        config = {}\n        with open(file_path, \"r\", encoding=\"utf-8\") as file:\n            for default_line in file:\n                line = default_line.strip()\n                if line and not line.startswith(\"#\"):\n                    key, value = line.split(\"=\", 1)\n                    config[key] = value\n        return config\n</code></pre>"},{"location":"env_parser_model/#ze.src.models.ENVParser.parse","title":"<code>parse(file_path)</code>  <code>classmethod</code>","text":"<p>Parses a .env configuration file.</p> <p>Parameters:</p> Name Type Description Default <code>file_path</code> <code>str</code> <p>The path to the .env file.</p> required <p>Returns:</p> Type Description <code>dict</code> <p>A dictionary containing the parsed environment variables.</p> Source code in <code>ze/src/models.py</code> <pre><code>@classmethod\ndef parse(cls, file_path: str) -&gt; dict:\n    \"\"\"\n    Parses a .env configuration file.\n\n    Args:\n        file_path: The path to the .env file.\n\n    Returns:\n        A dictionary containing the parsed environment variables.\n    \"\"\"\n    config = {}\n    with open(file_path, \"r\", encoding=\"utf-8\") as file:\n        for default_line in file:\n            line = default_line.strip()\n            if line and not line.startswith(\"#\"):\n                key, value = line.split(\"=\", 1)\n                config[key] = value\n    return config\n</code></pre>"},{"location":"index_br/","title":"ZeConfig EN   -   BR","text":"<p>ZeConfig \u00e9 uma biblioteca Python projetada para gerenciar configura\u00e7\u00f5es de aplicativos, facilitando o manuseio de dados confidenciais e configura\u00e7\u00f5es espec\u00edficas do ambiente. Ela oferece suporte a arquivos de configura\u00e7\u00e3o nos formatos TOM, JSON, YAML, YML e ENV.</p>"},{"location":"index_br/#recursos","title":"Recursos","text":"<ul> <li>Detec\u00e7\u00e3o autom\u00e1tica do local do arquivo de configura\u00e7\u00e3o dentro do diret\u00f3rio atual ou seus subdiret\u00f3rios.</li> <li>Suporte para arquivos de configura\u00e7\u00e3o TOML, JSON, YAML, YML e ENV.</li> <li>F\u00e1cil acesso a chaves e valores espec\u00edficos do ambiente.</li> </ul>"},{"location":"index_br/#instalacao","title":"Instala\u00e7\u00e3o","text":"<pre><code>pip install zeconfig\n</code></pre>"},{"location":"index_br/#uso","title":"Uso","text":""},{"location":"index_br/#0-criando-um-arquivo-de-configuracao","title":"0. Criando um arquivo de configura\u00e7\u00e3o","text":"<p>Na raiz do projeto, crie um arquivo com uma das extens\u00f5es .toml, .json, .yaml, .yml ou .env.</p> <p>Por exemplo: config.json</p>"},{"location":"index_br/#1-formato-do-arquivo-de-configuracao","title":"1. Formato do arquivo de configura\u00e7\u00e3o","text":""},{"location":"index_br/#exemplo-configjson","title":"Exemplo <code>config.json</code>","text":"<pre><code>{\n    \"DATABASE_URL\":  \"sqlite:///dev.db\",\n    \"SECRET_KEY\": \"dev-secret\"\n}\n</code></pre>"},{"location":"index_br/#2-inicializar-zeconfig","title":"2. Inicializar ZeConfig","text":"<pre><code>from ze import config\n</code></pre>"},{"location":"index_br/#3-gerenciar-configuracoes-de-ambiente","title":"3. Gerenciar configura\u00e7\u00f5es de ambiente","text":"<p>Retrieve a value for a specific key in the current environment:</p> <pre><code>DATABASE_URL = config(\"DATABASE_URL\")\nprint(f\"Database URL: {DATABASE_URL}\")\n\n&gt;&gt;&gt; OUTPUT: \n    sqlite:///dev.db\n</code></pre>"},{"location":"index_br/#tratamento-de-erros","title":"Tratamento de erros","text":"<p>ZeConfig gera exce\u00e7\u00f5es descritivas para problemas comuns:</p> <ul> <li><code>KeyError</code>: Ambiente ou chave ausente no arquivo de configura\u00e7\u00e3o.</li> </ul>"},{"location":"index_br/#licenca","title":"Licen\u00e7a","text":"<p>Este projeto \u00e9 licenciado sob a Licen\u00e7a MIT. Veja o arquivo LICENSE para detalhes.</p>"},{"location":"index_br/#contribuindo","title":"Contribuindo","text":"<p>Contribui\u00e7\u00f5es s\u00e3o bem-vindas! Abra um problema ou envie uma solicita\u00e7\u00e3o de pull no reposit\u00f3rio GitHub.</p>"},{"location":"index_br/#contato","title":"Contato","text":"<p>Para perguntas ou suporte, entre em contato com uadsonpy@gmail.com.</p>"},{"location":"json_parser_model/","title":"JSONParser","text":"<p>Parses a JSON configuration file.</p> <p>               Bases: <code>ConfigParser</code></p> Source code in <code>ze/src/models.py</code> <pre><code>class JSONParser(ConfigParser):\n    @classmethod\n    def parse(cls, file_path: str) -&gt; dict:\n        \"\"\"\n        Parses a JSON configuration file.\n\n        Args:\n            file_path: The path to the JSON file.\n\n        Returns:\n            A dictionary containing the parsed JSON data.\n        \"\"\"\n        with open(file_path, \"r\", encoding=\"utf-8\") as file:\n            return json.load(file)\n</code></pre>"},{"location":"json_parser_model/#ze.src.models.JSONParser.parse","title":"<code>parse(file_path)</code>  <code>classmethod</code>","text":"<p>Parses a JSON configuration file.</p> <p>Parameters:</p> Name Type Description Default <code>file_path</code> <code>str</code> <p>The path to the JSON file.</p> required <p>Returns:</p> Type Description <code>dict</code> <p>A dictionary containing the parsed JSON data.</p> Source code in <code>ze/src/models.py</code> <pre><code>@classmethod\ndef parse(cls, file_path: str) -&gt; dict:\n    \"\"\"\n    Parses a JSON configuration file.\n\n    Args:\n        file_path: The path to the JSON file.\n\n    Returns:\n        A dictionary containing the parsed JSON data.\n    \"\"\"\n    with open(file_path, \"r\", encoding=\"utf-8\") as file:\n        return json.load(file)\n</code></pre>"},{"location":"main/","title":"Main","text":""},{"location":"main/#singleton-instance-for-easy-access","title":"Singleton instance for easy access","text":"<p>from .manager import ConfigManager</p> <p>config = ConfigManager.get</p>"},{"location":"manager/","title":"Manager","text":"<p>Central configuration management handler with lazy-loaded file parsing.</p> <p>Implements a singleton-like pattern to manage application configuration through various file formats. Automatically searches for configuration files in either CONF_DIR or BASE_DIR locations defined in settings.</p> Class Attributes <p>_files_checked (bool): Flag indicating if configuration files have been loaded _config_data (Dict): Cache storing combined configuration data _config_files (List): Collection of discovered configuration filenames</p> Source code in <code>ze/src/manager.py</code> <pre><code>class ConfigManager:\n    \"\"\"Central configuration management handler with lazy-loaded file parsing.\n\n    Implements a singleton-like pattern to manage application configuration through\n    various file formats. Automatically searches for configuration files in either\n    CONF_DIR or BASE_DIR locations defined in settings.\n\n    Class Attributes:\n        _files_checked (bool): Flag indicating if configuration files have been loaded\n        _config_data (Dict): Cache storing combined configuration data\n        _config_files (List): Collection of discovered configuration filenames\n    \"\"\"\n\n    _files_checked = False\n    _config_data = {}\n    _config_files = []\n\n    @classmethod\n    def _load_config_files(cls):\n        \"\"\"Load configuration files from predefined directories.\n\n        Searches configuration directories in this order:\n        1. Primary configuration directory (CONF_DIR from settings)\n        2. Fallback to base directory (BASE_DIR from settings)\n\n        Note:\n            Executes only once per class lifecycle (idempotent operation).\n            Modifies class attributes _config_files and _config_data in-place.\n        \"\"\"\n\n        if cls._files_checked:\n            return\n\n        cls._files_checked = True\n\n        if Path(settings.CONF_DIR).exists():\n            path = Path(settings.CONF_DIR)\n            get_file_data(cls._config_files, cls._config_data, path)\n        elif Path(settings.BASE_DIR).exists():\n            path = Path(settings.BASE_DIR)\n            get_file_data(cls._config_files, cls._config_data, path)\n\n    @classmethod\n    def get(cls, key: str, default: Optional[str] = None) -&gt; Optional[str]:\n        \"\"\"Retrieve configuration value with error handling and lazy initialization.\n\n        Args:\n            key: Configuration key to look up\n            default: Fallback value if key not found (default: None)\n\n        Returns:\n            Configuration value as string if found, default value if provided\n\n        Raises:\n            ValueError: When key is not found and no default is provided\n\n        Note:\n            Automatically triggers configuration loading on first access.\n            Uses colorama for colored terminal error messages.\n        \"\"\"\n        if not cls._files_checked:\n            cls._load_config_files()\n        cls._load_config_files()\n\n        if cls._config_data.get(key, default) is None:\n            raise KeyError(f\"\"\"Key: '{key}' not found or file non exists\"\"\")\n        return cls._config_data.get(key, default)\n</code></pre>"},{"location":"manager/#ze.src.manager.ConfigManager._load_config_files","title":"<code>_load_config_files()</code>  <code>classmethod</code>","text":"<p>Load configuration files from predefined directories.</p> <p>Searches configuration directories in this order: 1. Primary configuration directory (CONF_DIR from settings) 2. Fallback to base directory (BASE_DIR from settings)</p> Note <p>Executes only once per class lifecycle (idempotent operation). Modifies class attributes _config_files and _config_data in-place.</p> Source code in <code>ze/src/manager.py</code> <pre><code>@classmethod\ndef _load_config_files(cls):\n    \"\"\"Load configuration files from predefined directories.\n\n    Searches configuration directories in this order:\n    1. Primary configuration directory (CONF_DIR from settings)\n    2. Fallback to base directory (BASE_DIR from settings)\n\n    Note:\n        Executes only once per class lifecycle (idempotent operation).\n        Modifies class attributes _config_files and _config_data in-place.\n    \"\"\"\n\n    if cls._files_checked:\n        return\n\n    cls._files_checked = True\n\n    if Path(settings.CONF_DIR).exists():\n        path = Path(settings.CONF_DIR)\n        get_file_data(cls._config_files, cls._config_data, path)\n    elif Path(settings.BASE_DIR).exists():\n        path = Path(settings.BASE_DIR)\n        get_file_data(cls._config_files, cls._config_data, path)\n</code></pre>"},{"location":"manager/#ze.src.manager.ConfigManager.get","title":"<code>get(key, default=None)</code>  <code>classmethod</code>","text":"<p>Retrieve configuration value with error handling and lazy initialization.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>Configuration key to look up</p> required <code>default</code> <code>Optional[str]</code> <p>Fallback value if key not found (default: None)</p> <code>None</code> <p>Returns:</p> Type Description <code>Optional[str]</code> <p>Configuration value as string if found, default value if provided</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>When key is not found and no default is provided</p> Note <p>Automatically triggers configuration loading on first access. Uses colorama for colored terminal error messages.</p> Source code in <code>ze/src/manager.py</code> <pre><code>@classmethod\ndef get(cls, key: str, default: Optional[str] = None) -&gt; Optional[str]:\n    \"\"\"Retrieve configuration value with error handling and lazy initialization.\n\n    Args:\n        key: Configuration key to look up\n        default: Fallback value if key not found (default: None)\n\n    Returns:\n        Configuration value as string if found, default value if provided\n\n    Raises:\n        ValueError: When key is not found and no default is provided\n\n    Note:\n        Automatically triggers configuration loading on first access.\n        Uses colorama for colored terminal error messages.\n    \"\"\"\n    if not cls._files_checked:\n        cls._load_config_files()\n    cls._load_config_files()\n\n    if cls._config_data.get(key, default) is None:\n        raise KeyError(f\"\"\"Key: '{key}' not found or file non exists\"\"\")\n    return cls._config_data.get(key, default)\n</code></pre>"},{"location":"parser_factory/","title":"ParserFactory","text":"<p>Factory class that returns the correct parser based on the file extension.</p> Source code in <code>ze/src/factory.py</code> <pre><code>class ParserFactory:\n    \"\"\"Factory class that returns the correct parser\n    based on the file extension.\n    \"\"\"\n\n    _parsers = {\n        '.json': JSONParser,\n        '.toml': TOMLParser,\n        '.yml': YAMLParser,\n        '.yaml': YAMLParser,\n        '.env': ENVParser,\n    }\n\n    @staticmethod\n    def get_parser(file_path: str) -&gt; ConfigParser:\n        \"\"\"\n        Returns the appropriate parser for the given\n        file extension.\n\n        Args:\n            file_path (str): Path to the configuration\n            file.\n\n        Returns:\n            ValueError: If the file extension is not\n            supported.\n        \"\"\"\n\n        ext = Path(file_path).suffix\n        if not ext:\n            ext = Path(file_path).name\n\n        parser_class = ParserFactory._parsers.get(ext)\n\n        if not parser_class:\n            raise ValueError(f\"Unsupported file extension: '{ext}'.\")\n\n        return parser_class()\n</code></pre>"},{"location":"parser_factory/#ze.src.factory.ParserFactory.get_parser","title":"<code>get_parser(file_path)</code>  <code>staticmethod</code>","text":"<p>Returns the appropriate parser for the given file extension.</p> <p>Parameters:</p> Name Type Description Default <code>file_path</code> <code>str</code> <p>Path to the configuration</p> required <p>Returns:</p> Name Type Description <code>ValueError</code> <code>ConfigParser</code> <p>If the file extension is not</p> <code>ConfigParser</code> <p>supported.</p> Source code in <code>ze/src/factory.py</code> <pre><code>@staticmethod\ndef get_parser(file_path: str) -&gt; ConfigParser:\n    \"\"\"\n    Returns the appropriate parser for the given\n    file extension.\n\n    Args:\n        file_path (str): Path to the configuration\n        file.\n\n    Returns:\n        ValueError: If the file extension is not\n        supported.\n    \"\"\"\n\n    ext = Path(file_path).suffix\n    if not ext:\n        ext = Path(file_path).name\n\n    parser_class = ParserFactory._parsers.get(ext)\n\n    if not parser_class:\n        raise ValueError(f\"Unsupported file extension: '{ext}'.\")\n\n    return parser_class()\n</code></pre>"},{"location":"settings/","title":"Settings","text":"<p>Configuration settings for the application's directory structure.</p> <p>Provides paths for essential directory locations within the project.</p> <p>Attributes:</p> Name Type Description <code>BASE_DIR</code> <code>Optional[str]</code> <p>Absolute path to the project's base directory, derived from this file's location. Initialized at module load time.</p> <code>CONF_DIR</code> <code>Optional[str]</code> <p>Absolute path to the configuration directory, located under the base directory. Defaults to 'configs' subdirectory.</p> Note <p>Paths are resolved at class definition time and will not dynamically follow file system changes after initialization.</p> Source code in <code>ze/src/settings.py</code> <pre><code>class Settings:\n    \"\"\"Configuration settings for the application's directory structure.\n\n    Provides paths for essential directory locations within the project.\n\n    Attributes:\n        BASE_DIR (Optional[str]): Absolute path to the project's base directory,\n            derived from this file's location. Initialized at module load time.\n        CONF_DIR (Optional[str]): Absolute path to the configuration directory,\n            located under the base directory. Defaults to 'configs' subdirectory.\n\n    Note:\n        Paths are resolved at class definition time and will not dynamically\n        follow file system changes after initialization.\n    \"\"\"\n\n    BASE_DIR: Optional[str] = Path.cwd()\n    CONF_DIR: Optional[str] = os.path.join(Path.cwd(), 'configs')\n</code></pre>"},{"location":"toml_parser_model/","title":"TOMLParser","text":"<p>Parses a TOML configuration file.</p> <p>               Bases: <code>ConfigParser</code></p> Source code in <code>ze/src/models.py</code> <pre><code>class TOMLParser(ConfigParser):\n    @classmethod\n    def parse(cls, file_path: str) -&gt; dict:\n        \"\"\"\n        Parses a TOML configuration file.\n\n        Args:\n            file_path: The path to the TOML file.\n\n        Returns:\n            A dictionary containing the parsed TOML data.\n        \"\"\"\n        with open(file_path, \"rb\") as file:\n            return tomllib.load(file)\n</code></pre>"},{"location":"toml_parser_model/#ze.src.models.TOMLParser.parse","title":"<code>parse(file_path)</code>  <code>classmethod</code>","text":"<p>Parses a TOML configuration file.</p> <p>Parameters:</p> Name Type Description Default <code>file_path</code> <code>str</code> <p>The path to the TOML file.</p> required <p>Returns:</p> Type Description <code>dict</code> <p>A dictionary containing the parsed TOML data.</p> Source code in <code>ze/src/models.py</code> <pre><code>@classmethod\ndef parse(cls, file_path: str) -&gt; dict:\n    \"\"\"\n    Parses a TOML configuration file.\n\n    Args:\n        file_path: The path to the TOML file.\n\n    Returns:\n        A dictionary containing the parsed TOML data.\n    \"\"\"\n    with open(file_path, \"rb\") as file:\n        return tomllib.load(file)\n</code></pre>"},{"location":"yaml_parser_model/","title":"YAMLParser","text":"<p>Parses a YAML configuration file.</p> <p>               Bases: <code>ConfigParser</code></p> Source code in <code>ze/src/models.py</code> <pre><code>class YAMLParser(ConfigParser):\n    @classmethod\n    def parse(cls, file_path: str) -&gt; dict:\n        \"\"\"\n        Parses a YAML configuration file.\n\n        Args:\n            file_path: The path to the YAML file.\n\n        Returns:\n            A dictionary containing the parsed YAML data.\n        \"\"\"\n        with open(file_path, \"rb\") as file:\n            return yaml.safe_load(file)\n</code></pre>"},{"location":"yaml_parser_model/#ze.src.models.YAMLParser.parse","title":"<code>parse(file_path)</code>  <code>classmethod</code>","text":"<p>Parses a YAML configuration file.</p> <p>Parameters:</p> Name Type Description Default <code>file_path</code> <code>str</code> <p>The path to the YAML file.</p> required <p>Returns:</p> Type Description <code>dict</code> <p>A dictionary containing the parsed YAML data.</p> Source code in <code>ze/src/models.py</code> <pre><code>@classmethod\ndef parse(cls, file_path: str) -&gt; dict:\n    \"\"\"\n    Parses a YAML configuration file.\n\n    Args:\n        file_path: The path to the YAML file.\n\n    Returns:\n        A dictionary containing the parsed YAML data.\n    \"\"\"\n    with open(file_path, \"rb\") as file:\n        return yaml.safe_load(file)\n</code></pre>"}]}